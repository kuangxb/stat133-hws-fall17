} else if (score >= 90) {
return('A')
} else if (score >= 80) {
return('B')
} else if (score >= 70) {
return('C')
} else if (score >= 60) {
return('D')
} else {
return('F')
}
}
# grade "A"
grade(score = 90)
# grade "B"
grade(score = 89.9999)
# grade "C"
grade(score = 70.0000001)
# grade "F"
grade(score = 50)
grade(score = 110)
# Convert the day of the week into a number.
day <- "Tuesday" # Change this value!
switch(day, # The expression to be evaluated.
Sunday = 1,
Monday = 2,
Tuesday = 3,
Wednesday = 4,
Thursday = 5,
Friday = 6,
Saturday = 7,
NA) # an (optional) default value if there are no matches
# Convert a number into a day of the week.
day_num <- 3 # Change this value!
switch(day_num,
"Sunday",
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday")
# Convert a number into a day of the week.
day_num <- 1 # Change this value!
switch(day_num,
"Sunday",
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday")
miles2inches(2)
miles2inches(x = 1) { x * 63360}
miles2inches <- function(x = 1) { x * 63360}
miles2feet <- function(x = 1) { x * 5280}
miles2yards <- function(x = 1) { x * 1760}
miles2kms <- function(x = 1) { x / 0.62137}
miles2inches(2)
miles2feet(2)
miles2yards(2)
miles2meters(2)
miles2meters <- function(x = 1) { x / 0.00062137}
miles2inches(2)
miles2feet(2)
miles2yards(2)
miles2meters(2)
miles2kms(2)
convert <- function(x, type) {
switch(type,
in = miles2inches(x),
convert <- function(x, type) {
switch(type,
in = miles2inches(x),
convert <- function(x, type) {
switch(type,
'in' = miles2inches(x),
'ft' = miles2feet(x),
'yd' = miles2yard(x),
'm' = miles2meters(x),
'km' = miles2kms(x))
}
convert(40, to = "in")
convert <- function(x, to) {
switch(to,
'in' = miles2inches(x),
'ft' = miles2feet(x),
'yd' = miles2yard(x),
'm' = miles2meters(x),
'km' = miles2kms(x))
}
convert(40, to = "in")
convert(3, "in")
convert(3, "ft")
convert(3, "yd")
convert(3, "in")
convert(3, "ft")
convert(3, "yd")
convert <- function(x, to) {
switch(to,
'in' = miles2inches(x),
'ft' = miles2feet(x),
'yd' = miles2yards(x),
'm' = miles2meters(x),
'km' = miles2kms(x))
}
convert(3, "in")
convert(3, "ft")
convert(3, "yd")
convert(3, "m")
convert(3, "km")
# your reduce() function
reduce <- function(x) {
while (x %% 2 == 0) { # Continue the loop as long as val_while is even.
x <- x / 2
}
print(x)
}
reduce(898128000)
vec <- c(3, 1, 4)
vec + 1
vec <- c(3, 1, 4)
for (j in 1:3) {
print(vec[j] + 1)
}
vec <- c(2, 3, 4) # Change this value!
for (j in vec) {
j <- 3 * j
print(j)
}
vec
vec <- c(2, 3, 5)  # Change this value!
vec2 <- rep(0, length(vec))  # "empty" of zeros vector to be filled in the loop
for (i in 1:length(vec)) {# Replace c() with an appropriate sequence.
vec[i] <- vec[i] * 3
print(vec[i])
vec2[i] = vec[i]
}
vec2
k = 5
sum = 0
terms = rep(0, k + 1)
for (i in 0:k) {
sum = sum + (1 / (2 ^ i))
terms[i] = (1 / (2 ^ i))
}
sum
terms
k = 5
sum = 0
terms = rep(0, k + 1)
for (i in 0:k) {
sum = sum + (1 / (9 ^ i))
terms[i] = (1 / (9 ^ i))
}
sum
terms
n = 5
d = 3
a_n = 3 #First term
terms = rep(a_n, n)
for(i in 2:n) {
a_n = a_n + d
terms[i] = a_n
}
terms
a_n
n = 5
r = 2
a_n = 3 #First term
terms = rep(a_n, n)
for(i in 2:n) {
a_n = a_n * (r)
terms[i] = a_n
}
terms
a_n
# Your for loop
sin_x <- function(x, n){
this_sin = 0
for (i in 1:n) {
this_sin = this_sin + ((-1) ^ (i - 1)) * ((x ^ (2 * i - 1))/factorial(2 *i-1))
}
this_sin
}
sin_x(2,5)
sin_x(2,10)
sin_x(2,50)
sin_x(2, 100)
sin(2)
A <- matrix(1:20, nrow = 5, ncol = 4)
A
# empty matrix B
B <- matrix(NA, nrow = 5, ncol = 4)
# for loop to get matrix B
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
B[i,j] <- A[i,j] + i
}
}
B
set.seed(123)
X <- matrix(rnorm(12), nrow = 4, ncol = 3)
X
# for loops to get Y
Y = matrix(NA, nrow = 4, ncol = 3)
for(i in 1:nrow(A)){
for(j in 1:ncol(A)){
if (A[i,j] < 0){
B[i,j] = A[i, j] ^ 2
}
else {
B[i,j] = sqrt(A[i, j])
}
}
}
B
# Divide a number by 2 until it becomes odd.
val_rep <- 898128000 # Change this value!
repeat {
print(val_rep)
if (val_rep %% 2 == 1) { # If val_rep is odd,
break                  # end the loop.
}
val_rep <- val_rep / 2 # Divide val_rep by 2 since val_rep was even.
# When the end of the loop is reached, return to the beginning of the loop.
}
# Divide a number by 2 until it becomes odd.
val_while <- 898128000 # Change this value!
while (val_while %% 2 == 0) { # Continue the loop as long as val_while is even.
print(val_while)
val_while <- val_while / 2
}
print(val_while)
![arithmetic mean](lab08-images/arith_mean.png)
x = 1:100
sum = 0
terms = 0
mean = 0
for(i in x) {
sum = sum + i
terms = terms + 1
mean = sum/terms
}
mean
x = 1:100
sum = 0
terms = 0
mean = 0
while(i <= 100) {
sum = sum + i
terms = terms + 1
mean = sum/terms
i += 1
x = 1:100
sum = 0
terms = 0
mean = 0
while(i <= 100) {
sum = sum + i
terms = terms + 1
mean = sum/terms
i = i + 1
}
mean
x = 1:100
sum = 0
terms = 0
mean = 0
while(i <= 100) {
sum = sum + i
terms = terms + 1
mean = sum/terms
i = i + 1
}
mean
sum
terms
x = 1:100
sum = 0
terms = 0
mean = 0
while(i <= 100) {
sum = sum + i
terms = terms + 1
mean = sum/terms
i = i + 1
}
mean
sum
terms
x = 1:100
sum = 0
terms = 0
mean = 0
while(i <= 100) {
sum = sum + i
terms = terms + 1
mean = sum/terms
i = i + 1
}
mean
sum
terms
x = 1:100
sum = 0
terms = 0
mean = 0
while(terms <= 100) {
sum = sum + i
terms = terms + 1
mean = sum/terms
i = i + 1
}
mean
sum
terms
x = 1:100
sum = 0
terms = 0
mean = 0
while(i <= 100) {
sum = sum + i
mean = sum/i
i = i + 1
}
mean
sum
terms
x = 1:100
sum = 0
terms = 0
mean = 0
while(terms <= 100) {
sum = sum + terms
mean = sum/terms
terms = terms + 1
}
mean
sum
terms
x = 1:100
sum = 0
terms = 1
mean = 0
repeat {
sum = sum + terms
mean = sum/terms
terms = terms + 1
if (terms == 101){
break
}
}
mean
sum
terms
mean(x)
?length
length(x)
x = 1:100
DIFF = 0
SD = 0
for(i in x){
DIFF = DIFF + (i - mean(x)) ^ 2))
x = 1:100
DIFF = 0
SD = 0
for(i in x){
DIFF = DIFF + ((i - mean(x)) ^ 2)
SD = sqrt((1/(length(x) - 1)) * DIFF)
}
x = 1:100
DIFF = 0
SD = 0
for(i in x){
DIFF = DIFF + ((i - mean(x)) ^ 2)
SD = sqrt((1/(length(x) - 1)) * DIFF)
}
SD
x = 1:100
DIFF = 0
SD = 0
i = 0
while(i <= 100){
DIFF = DIFF + ((i - mean(x)) ^ 2)
SD = sqrt((1/(length(x) - 1)) * DIFF)
i = i + 1
}
SD
x = 1:100
DIFF = 0
SD = 0
i = 1
while(i <= 100){
DIFF = DIFF + ((i - mean(x)) ^ 2)
SD = sqrt((1/(length(x) - 1)) * DIFF)
i = i + 1
}
SD
x = 1:100
DIFF = 0
SD = 0
i = 1
repeat{
DIFF = DIFF + ((i - mean(x)) ^ 2)
SD = sqrt((1/(length(x) - 1)) * DIFF)
i = i + 1
if (i > 100){
break
}
}
SD
x = 1:50
prod = 1
for(i in x){
prod = prod * i
geo = prod / (1/length(x))
}
geo
x = 1:50
prod = 1
for(i in x){
prod = prod * i
geo = prod / (1/length(x))
}
prod
geo
x = 1:50
prod = 1
for(i in x){
prod = prod * i
geo = prod ^ (1/length(x))
}
prod
prod ^ (1/50)
geo
x = 1:50
prod = 1
i = 1
while(i <= 100){
prod = prod * i
geo = prod ^ (1/length(x))
i = i + 1
}
prod
geo
x = 1:50
prod = 1
i = 1
while(i <= 100){
prod = prod * i
geo = prod ^ (1/length(x))
i = i + 1
}
factorial(100)
prod
geo
x = 1:50
prod = 1
i = 1
while(i <= 50){
prod = prod * i
geo = prod ^ (1/length(x))
i = i + 1
}
factorial(100)
prod
geo
x = 1:50
prod = 1
for(i in x){
prod = prod * i
geo = prod ^ (1/length(x))
}
prod
geo
x = 1:50
prod = 1
i = 1
while(i <= 50){
prod = prod * i
geo = prod ^ (1/length(x))
i = i + 1
}
prod
geo
x = 1:50
prod = 1
i = 1
repeat{
prod = prod * i
geo = prod ^ (1/length(x))
i = i + 1
if ( i >= 50){
break
}
}
prod
geo
x = 1:50
prod = 1
i = 1
repeat{
prod = prod * i
geo = prod ^ (1/length(x))
i = i + 1
if ( i > 50){
break
}
}
prod
geo
