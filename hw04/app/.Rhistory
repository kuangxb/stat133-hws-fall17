#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggvis)
library(dplyr)
source('../code/functions.r')
clean_dat <- read.csv('../data/cleandata/cleanscores.csv')
clean_dat$Grade = factor(clean_dat$Grade,
levels = c('A+', 'A', 'A-',
'B+', 'B', 'B-',
'C+', 'C', 'C-',
'D', 'F'))
colNames <- colnames(clean_dat[1:22])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected == 1",
h3('Grade Distribution'),
tableOutput('table')),
conditionalPanel(condition = 'input.tabselected == 2',
selectInput('var1', "X-axis variable", colNames,
selected = "HW1"),
sliderInput('width', 'Bin Width',
min = 1, max = 10, value = 10)),
conditionalPanel(condition = "input.tabselected==3",
selectInput('var2', "X-axis variable", colNames,
selected = "Test1"),
selectInput('var3', "Y-axis variable", colNames,
selected = "Overall"),
sliderInput('opacity', 'Opacity',
min = 0, max = 1, value = .5),
radioButtons("line", label = h3("Show line"),
choices = list("none" = 1,
"lm" = 2,
"loess" = 3)))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel('Histogram', value = 2,
ggvisOutput('histogram'),
'Summary Statistics',
verbatimTextOutput('summ')),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot"),
'Correlation:',
textOutput('corr')),
id = 'tabselected')
)
)
)
server <- function(input, output) {
grade_freq <- clean_dat[24]
grade_freq <- grade_freq%>% group_by('Grade')%>% count(Grade)
grade_freq$Prop <- round(grade_freq$n/334,2)
grade_freq <- grade_freq[2:4]
grade_freq <- grade_freq%>% rename(Freq = n)
output$table <- renderTable({
grade_freq})
vis_barchart <- reactive({
clean_dat %>%
ggvis(x = ~Grade, fill = "blue")%>%
layer_bars()
})
vis_barchart %>% bind_shiny("barchart")
vis_histogram <- reactive({
var1 <- prop('x', as.symbol(input$var1))
clean_dat%>%
ggvis(x = var1, fill := 'blue', stroke := 'gold') %>%
layer_histograms(width = input$width)
})
vis_histogram %>% bind_shiny('histogram')
summaries <- reactive({
print_stats(summary_stats(clean_dat[[input$var1]]))
})
output$summ <- renderPrint({
summaries()
})
vis_scatter <- reactive({
var2 <- prop('x', as.symbol(input$var2))
var3 <- prop('y', as.symbol(input$var3))
if (input$line == 1){
clean_dat%>%
ggvis(x = var2,y = var3, opacity := input$opacity,
stroke := 'red')%>%
layer_points()
}
else if (input$line == 2){
clean_dat%>%
ggvis(x = var2,y = var3, opacity := input$opacity,
stroke := 'red')%>%
layer_points()%>% layer_model_predictions(model = 'lm', se = TRUE)
}
else if (input$line == 3){
clean_dat%>%
ggvis(x = var2,y = var3, opacity := input$opacity,
stroke := 'red')%>%
layer_points()%>% layer_smooths()
}
})
vis_scatter %>% bind_shiny('scatterplot')
correlation <- reactive({
(cor(clean_dat[[input$var2]], clean_dat[[input$var3]]))
})
output$corr <- renderText({
correlation()
})
}
# Run the application
shinyApp(ui = ui, server = server)
grade_freq$n/334,2
grade_freq$n/334
grade_freq <- clean_dat[24]
grade_freq$n/334
grade_freq$n
grade_freq$Prop
?prop
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
View(data)
View(data)
library(readr)
library(dplyr)
source('functions.R')
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(data)
print_stats(apply(data, 2, summary_stats))
sink()
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Test1 <- rescale100(data$EX1, xmin = 0, xmax = 80)
data$Test2 <- rescale100(data$EX2, xmin = 0, xmax = 90)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
data$Lab <- apply(data[10],1, score_lab)
data$Overall <- (0.1 * data$Lab) + (0.3 * data$Homework) + (0.15 * data$Quiz) + (0.2 * data$Test1) + (0.25 * data$Test2)
score_grade <- function(score) {
if (score >= 95) {
return("A+")
}
else if (score >= 90 ) {
return("A")
}
else if (score >= 88) {
return("A-")
}
else if (score >= 86) {
return("B+")
}
else if (score >= 82) {
return("B")
}
else if (score >= 79.5) {
return("B-")
}
else if (score >= 77.5) {
return("C+")
}
else if (score >= 70) {
return("C")
}
else if (score >= 60) {
return("C-")
}
else if (score >= 50) {
return("D")
}
else {
return("F")
}
}
data$Grade <- apply(data["Overall"], 1, score_grade)
for (i in 18:23){
x <- paste('../output', colnames(data[i]), sep = '/')
z <- paste(x, 'stats.txt', sep = '-')
sink(z)
print_stats(summary_stats(data[[i]]))
sink()
}
data$Grade = factor(data$Grade,
levels = c('A+', 'A', 'A-',
'B+', 'B', 'B-',
'C+', 'C', 'C-',
'D', 'F'))
sink('../output/summary-cleanscores.txt')
str(data)
sink()
write.csv(data, file = "../data/cleandata/cleanscores.csv", row.names = FALSE)
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
setwd(../)
setwd(..)
setwd(.../)
