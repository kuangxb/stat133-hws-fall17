# Title: Get Maximum
# Description: Takes in a numeric vector and returns the maximum
# Input: Some numeric vector
# Output: Maximum value of the numeric vector
#====================================================
get_maximum <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec = remove_missing(vec)
}
return(sort(vec, decreasing = TRUE)[1])
}
#====================================================
# Title: Get Range
# Description: Returns the range of the numeric vector
# Input: Some numeric vector
# Output: Difference between the maximum and minimum value
#====================================================
get_range <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec = remove_missing(vec)
}
return(get_maximum(vec) - get_minimum(vec))
}
#====================================================
# Title: Get Median
# Description: Function that returns the median value of a numeric vector
# Input: Some numeric vector
# Output: Median Value of the Numeric Value
#====================================================
get_median <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec <- remove_missing(vec)
}
size <- length(vec)
if (size %% 2 == 0) {
vec <- sort(vec)
return((vec[size / 2] + vec[(size / 2) + 1])/2)
} else {
return(vec[size / 2 + 0.5])
}
}
#====================================================
# Title: Get Average
# Description: Returns the average of all values in the numeric vector
# Input: Numeric Vector
# Output: Average of all values in the numeric vector
#====================================================
get_average <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec <- remove_missing(vec)
}
counter <- 0
sum <- 0
for (i in vec) {
if (!is.na(i)) {
counter = counter + 1
sum = sum + i
}
}
return(sum / counter)
}
#====================================================
# Title: Get Standard Deviation
# Description: Returns the Standard Deviation of Numeric Vector
# Input: Some numeric vector
# Output: Standard Deviation of Numeric Vector
#====================================================
get_stdev <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec <- remove_missing(vec)
}
ave = get_average(vec)
sum = 0
for (i in vec) {
if (!is.na(i)) {
sum = sum + ((i - ave) ^ 2)
}
}
return (sqrt((1 / ((length(vec) - 1))) * sum))
}
#====================================================
# Title: First Quartile
# Description: Computes the first quartile of the input vector
# Input: Some numeric vector
# Output: First quartile of numeric vector
#====================================================
get_quartile1 <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec <- remove_missing(vec)
}
vec2 <- remove_missing(vec)
return (quantile(vec2)[[2]])
}
#====================================================
# Title: Third Quartile
# Description: Computes the first quartile of the input vector
# Input: Some numeric vector
# Output: Third quartile of numeric vector
#====================================================
get_quartile3 <- function(vec, na.rm = TRUE) {
if (na.rm == TRUE) {
vec <- remove_missing(vec)
}
vec2 <- remove_missing(vec)
return (quantile(vec2)[[4]])
}
#====================================================
# Title: Count Missing
# Description: Counts the numbr of missing values
# Input: Some numeric vector
# Output: Returns the number of the missing values
#====================================================
count_missing <- function(vec) {
count = 0
for (i in 1:length(vec)) {
if (is.na(vec[i])) {
count = count + 1
}
}
return(count)
}
#====================================================
# Title: Stat Summary
# Description: Counts the numbr of missing values
# Input: Some numeric vector
# Output: Returns the number of the missing values
#====================================================
summary_stats <- function(vec) {
list(minimum = get_minimum(vec), percent10 = quantile(remove_missing(vec), probs = 0,1),
quartile1 = get_quartile1(vec), median = get_median(vec),
mean = get_average(vec),quartile3 = get_quartile3(vec),
percent90 = quantile(remove_missing(vec), probs = 0.9),
maximum = get_maximum(vec), range = get_range(vec),
stdev = get_stdev(vec), missing = count_missing(vec))
}
#====================================================
# Title: Print Stats
# Description: Takes a list of summary statistics and prints the value in a nice format
# Input: List of Summary Statistics
# Output: Printed values in a nice format
#====================================================
print_stats <- function(stats){
cat('minimum  :', unlist(stats[1]), '\n')
cat('percent10:', unlist(stats[2]),'\n')
cat('quartile1:', unlist(stats[3]), '\n')
cat('median   :', unlist(stats[4]), '\n')
cat('mean     :', unlist(stats[5]), '\n')
cat('quartile3:', unlist(stats[6]), '\n')
cat('percent90:', unlist(stats[7]), '\n')
cat('maximum  :', unlist(stats[8]), '\n')
cat('range    :', unlist(stats[9]), '\n')
cat('stdev    :', unlist(stats[10]), '\n')
cat('missing  :', unlist(stats[11]), '\n')
}
#====================================================
# Title: Rescale
# Description: Computes a rescaled vector with a potential scale from 0 to 100
# Input: A numeric vector x, a minimum xmin, and a maximum xmax
# Output: Rescaled vector
#====================================================
rescale100 <- function(x, xmin, xmax) {
term <- (x - xmin) / (xmax - xmin)
return(100 * term)
}
#====================================================
# Title: Drop Lowest
# Description: Takes in a numeric vector and returns the vector after removing the lowest value
# Input: Some numeric vector of length N
# Output: Numeric vector of length N - 1 with the lowest term removed
#====================================================
drop_lowest <- function(vec) {
min <- 1
for (i in 1:length(vec)) {
if (vec[i] < vec[min]) {
min = i
}
}
vec = vec[-min]
return(vec)
}
#====================================================
# Title: Score Homework
# Description: Takes in numeric vector of homework scores and returns the mean of the homework scores.
# Input: Some numeric vector of homework scores, an option to drop the lowest score
# Output: Average of homework scores
#====================================================
score_homework <- function(hws, drop = TRUE) {
if (drop == TRUE) {
hws <- drop_lowest(hws)
}
return(get_average(hws))
}
#====================================================
# Title: Score Quiz
# Description: Takes in numeric vector of quiz scores and returns the mean of the quiz scores.
# Input: Some numeric vector of quiz scores, an option to drop the lowest score
# Output: Average of quiz scores
#====================================================
score_quiz <- function(hws, drop = TRUE) {
if (drop == TRUE) {
hws <- drop_lowest(hws)
}
return(get_average(hws))
}
#====================================================
# Title: Score Lab
# Description: A function that takes a numeric value of lab attendance, and returns the lab score.
# Input: An attendance score between 0 - 12
# Output: Corresponding lab score based on attendance
#====================================================
score_lab <- function(score) {
if (score >= 11) {
return(100)
} else if (score == 10) {
return(80)
} else if (score == 9) {
return(60)
} else if (score == 8) {
return(40)
} else if (score == 7) {
return(20)
} else {
return(0)
}
}
library("testthat")
source("functions.R")
case_1 <- c(1, 4, 7, NA, 10)
case_2 <- c(NA, NA, NA, NA, 5)
case_3 <- c(-1, 1, 0)
case_4 <- c(0, 0, 0, 0)
context("Testing remove_missing()")
test_that('missing values are removed', {
expect_equal(remove_missing(case_1), c(1, 4, 7, 10))
expect_equal(length(remove_missing(case_1)), 4)
expect_equal(remove_missing(case_2), c(5))
expect_equal(length(remove_missing(case_2)), 1)
})
context("Testing get_minimum()")
test_that("minimum value should be returned", {
expect_equal(get_minimum(case_1), 1)
expect_equal(get_minimum(case_2), 5)
expect_equal(get_minimum(case_3), -1)
expect_equal(get_minimum(case_4), 0)
})
context("Testing get_maximum()")
test_that("maximum value should be returned", {
expect_equal(get_maximum(case_1), 10)
expect_equal(get_maximum(case_2), 5)
expect_equal(get_maximum(case_3), 1)
expect_equal(get_maximum(case_4), 0)
})
context("Testing get_range()")
test_that("range value should be returned", {
expect_equal(get_range(case_1), 9)
expect_equal(get_range(case_2), 0)
expect_equal(get_range(case_3), 2)
expect_equal(get_range(case_4), 0)
})
context("Testing get_median()")
test_that("return median of numeric vector", {
expect_equal(get_median(case_1), 7)
expect_equal(get_median(case_2, na.rm = TRUE), NA)
expect_equal(get_median(case_3), 1)
expect_equal(get_median(case_4), 0)
})
context("Testing get_average()")
test_that("return average of numeric vector", {
expect_equal(get_average(case_1), 5.5)
expect_equal(get_average(case_2), 5)
expect_equal(get_average(case_3), 0)
expect_equal(get_average(case_4), 0)
})
context("Testing get_stdev()")
test_that("return Standard Deviation of numeric vector", {
expect_equal(get_stdev(case_1), 3.872983, tolerance = 1e-6)
expect_equal(get_stdev(case_2, na.rm = TRUE), NaN)
expect_equal(get_stdev(case_3), 1)
expect_equal(get_stdev(case_4), 0)
})
context("Testing get_quartile1()")
test_that("return First Quartile of numeric vector", {
expect_equal(get_quartile1(case_1), 3.25, tolerance = 1e-6)
expect_equal(get_quartile1(case_2, na.rm = TRUE), 5)
expect_equal(get_quartile1(case_3), -0.5)
expect_equal(get_quartile1(case_4), 0)
})
context("Testing get_quartile3()")
test_that("return Standard Deviation of numeric vector", {
expect_equal(get_quartile3(case_1), 7.75, tolerance = 1e-6)
expect_equal(get_quartile3(case_2, na.rm = TRUE), 5)
expect_equal(get_quartile3(case_3), 0.5)
expect_equal(get_quartile3(case_4), 0)
})
context("Testing count_missing()")
test_that("return Standard Deviation of numeric vector", {
expect_equal(count_missing(case_1), 1)
expect_equal(count_missing(case_2), 4)
expect_equal(count_missing(case_3), 0)
expect_equal(count_missing(case_4), 0)
})
context("Testing summary_stats()")
test_that("return Summary Statistics of numeric vector", {
stats <- summary_stats(case_1)
expect_equal(names(stats), c("minimum", "percent10", "quartile1"
, "median", "mean", "quartile3", "percent90"
, "maximum", "range", "stdev", "missing"))
expect_equal(stats[["minimum"]], 1)
expect_equal(stats[["quartile3"]], 7.75)
expect_equal(names(stats)[3], "quartile1")
})
context("Testing rescale100()")
test_that("return rescaled vector", {
expect_equal(rescale100(case_1, 0, 10), c(10, 40, 70, NA, 100))
b <- c(18, 15, 16, 4, 17, 9)
expect_equal(rescale100(b, 0, 20), c(90, 75, 80, 20, 85, 45))
expect_equal(rescale100(case_3, 0, 5), c(-20, 20, 0))
expect_equal(rescale100(case_4, 0, 100), c(0, 0, 0, 0))
})
context("Testing drop_lowest()")
test_that("remove lowest value from numeric vector", {
expect_equal(drop_lowest(remove_missing(case_1)), c(4, 7, 10))
b <- c(10, 10, 8.5, 4, 7, 9)
expect_equal(drop_lowest(b), c(10, 10, 8.5, 7, 9))
expect_equal(drop_lowest(case_3), c(1, 0))
expect_equal(drop_lowest(case_4), c(0, 0, 0))
})
context("Testing score_homework()")
test_that("return averagoe of homework scores, lowest might/might not be dropped", {
hws <- c(100, 80, 30, 70, 75, 85)
expect_equal(score_homework(hws), 82)
expect_equal(score_homework(hws, drop = FALSE), 73.33333, tolerance = 1e-6)
hws2 <- c(100, 80, 0, 90, 95, 85)
expect_equal(score_homework(hws2), 90)
expect_equal(score_homework(hws2, drop = FALSE), 75)
})
context("Testing score_quiz()")
test_that("return averagoe of homework scores, lowest might/might not be dropped", {
quiz <- c(100, 80, 70, 0)
expect_equal(score_quiz(quiz), 83.33333, tolerance = 1e-6)
expect_equal(score_quiz(quiz, drop = FALSE), 62.5, tolerance = 1e-6)
quiz2 <- c(10, 8, 5, 9)
expect_equal(score_quiz(quiz2), 9)
expect_equal(score_quiz(quiz2, drop = FALSE), 8)
})
context("Testing score_lab()")
test_that("return lab scores", {
expect_equal(score_lab(12), 100)
expect_equal(score_lab(10), 80)
expect_equal(score_lab(9), 60)
expect_equal(score_lab(6), 0)
})
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
case_1
library("testthat")
source("functions.R")
case_1 <- c(1, 4, 7, NA, 10)
case_2 <- c(NA, NA, NA, NA, 5)
case_3 <- c(-1, 1, 0)
case_4 <- c(0, 0, 0, 0)
context("Testing remove_missing()")
test_that('missing values are removed', {
expect_equal(remove_missing(case_1), c(1, 4, 7, 10))
expect_equal(length(remove_missing(case_1)), 4)
expect_equal(remove_missing(case_2), c(5))
expect_equal(length(remove_missing(case_2)), 1)
})
context("Testing get_minimum()")
test_that("minimum value should be returned", {
expect_equal(get_minimum(case_1), 1)
expect_equal(get_minimum(case_2), 5)
expect_equal(get_minimum(case_3), -1)
expect_equal(get_minimum(case_4), 0)
})
context("Testing get_maximum()")
test_that("maximum value should be returned", {
expect_equal(get_maximum(case_1), 10)
expect_equal(get_maximum(case_2), 5)
expect_equal(get_maximum(case_3), 1)
expect_equal(get_maximum(case_4), 0)
})
context("Testing get_range()")
test_that("range value should be returned", {
expect_equal(get_range(case_1), 9)
expect_equal(get_range(case_2), 0)
expect_equal(get_range(case_3), 2)
expect_equal(get_range(case_4), 0)
})
context("Testing get_median()")
test_that("return median of numeric vector", {
expect_equal(get_median(case_1), 5.5)
expect_equal(get_median(case_2, na.rm = TRUE), 5)
expect_equal(get_median(case_3), 1)
expect_equal(get_median(case_4), 0)
})
context("Testing get_average()")
test_that("return average of numeric vector", {
expect_equal(get_average(case_1), 5.5)
expect_equal(get_average(case_2), 5)
expect_equal(get_average(case_3), 0)
expect_equal(get_average(case_4), 0)
})
context("Testing get_stdev()")
test_that("return Standard Deviation of numeric vector", {
expect_equal(get_stdev(case_1), 3.872983, tolerance = 1e-6)
expect_equal(get_stdev(case_2, na.rm = TRUE), NaN)
expect_equal(get_stdev(case_3), 1)
expect_equal(get_stdev(case_4), 0)
})
context("Testing get_quartile1()")
test_that("return First Quartile of numeric vector", {
expect_equal(get_quartile1(case_1), 3.25, tolerance = 1e-6)
expect_equal(get_quartile1(case_2, na.rm = TRUE), 5)
expect_equal(get_quartile1(case_3), -0.5)
expect_equal(get_quartile1(case_4), 0)
})
context("Testing get_quartile3()")
test_that("return Standard Deviation of numeric vector", {
expect_equal(get_quartile3(case_1), 7.75, tolerance = 1e-6)
expect_equal(get_quartile3(case_2, na.rm = TRUE), 5)
expect_equal(get_quartile3(case_3), 0.5)
expect_equal(get_quartile3(case_4), 0)
})
context("Testing count_missing()")
test_that("return Standard Deviation of numeric vector", {
expect_equal(count_missing(case_1), 1)
expect_equal(count_missing(case_2), 4)
expect_equal(count_missing(case_3), 0)
expect_equal(count_missing(case_4), 0)
})
context("Testing summary_stats()")
test_that("return Summary Statistics of numeric vector", {
stats <- summary_stats(case_1)
expect_equal(names(stats), c("minimum", "percent10", "quartile1"
, "median", "mean", "quartile3", "percent90"
, "maximum", "range", "stdev", "missing"))
expect_equal(stats[["minimum"]], 1)
expect_equal(stats[["quartile3"]], 7.75)
expect_equal(names(stats)[3], "quartile1")
})
context("Testing rescale100()")
test_that("return rescaled vector", {
expect_equal(rescale100(case_1, 0, 10), c(10, 40, 70, NA, 100))
b <- c(18, 15, 16, 4, 17, 9)
expect_equal(rescale100(b, 0, 20), c(90, 75, 80, 20, 85, 45))
expect_equal(rescale100(case_3, 0, 5), c(-20, 20, 0))
expect_equal(rescale100(case_4, 0, 100), c(0, 0, 0, 0))
})
context("Testing drop_lowest()")
test_that("remove lowest value from numeric vector", {
expect_equal(drop_lowest(remove_missing(case_1)), c(4, 7, 10))
b <- c(10, 10, 8.5, 4, 7, 9)
expect_equal(drop_lowest(b), c(10, 10, 8.5, 7, 9))
expect_equal(drop_lowest(case_3), c(1, 0))
expect_equal(drop_lowest(case_4), c(0, 0, 0))
})
context("Testing score_homework()")
test_that("return averagoe of homework scores, lowest might/might not be dropped", {
hws <- c(100, 80, 30, 70, 75, 85)
expect_equal(score_homework(hws), 82)
expect_equal(score_homework(hws, drop = FALSE), 73.33333, tolerance = 1e-6)
hws2 <- c(100, 80, 0, 90, 95, 85)
expect_equal(score_homework(hws2), 90)
expect_equal(score_homework(hws2, drop = FALSE), 75)
})
context("Testing score_quiz()")
test_that("return averagoe of homework scores, lowest might/might not be dropped", {
quiz <- c(100, 80, 70, 0)
expect_equal(score_quiz(quiz), 83.33333, tolerance = 1e-6)
expect_equal(score_quiz(quiz, drop = FALSE), 62.5, tolerance = 1e-6)
quiz2 <- c(10, 8, 5, 9)
expect_equal(score_quiz(quiz2), 9)
expect_equal(score_quiz(quiz2, drop = FALSE), 8)
})
context("Testing score_lab()")
test_that("return lab scores", {
expect_equal(score_lab(12), 100)
expect_equal(score_lab(10), 80)
expect_equal(score_lab(9), 60)
expect_equal(score_lab(6), 0)
})
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
library(shiny)
runGitHub("stat133-hws-fall17", "kuangxb", subdir = "hw04/app")
library(shiny)
#runGitHub("stat133-hws-fall17", "kuangxb", subdir = "hw04/app")
