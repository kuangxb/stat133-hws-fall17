library(dplyr)
source('functions.R')
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(data)
print_stats(apply(data, 2, summary_stats))
sink()
View(data)
View(data)
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i][j])) {
data[i][j] <- 0
}
}
}
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
data$QZ1
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Homework <- apply(data[1:9], 1, score_homework(drop = TRUE))
data$Homework <- apply(data[1:9], 1, score_homework)
[]
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
source('~/.active-rstudio-document')
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Test1 <- rescale100(data$EX1, xmin = 0, xmax = 80)
data$Test2 <- rescale100(data$EX2, xmin = 0, xmax = 90)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Test1 <- rescale100(data$EX1, xmin = 0, xmax = 80)
data$Test2 <- rescale100(data$EX2, xmin = 0, xmax = 90)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
library(readr)
library(dplyr)
source('functions.R')
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(data)
print_stats(apply(data, 2, summary_stats))
sink()
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Test1 <- rescale100(data$EX1, xmin = 0, xmax = 80)
data$Test2 <- rescale100(data$EX2, xmin = 0, xmax = 90)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
â€¢ add a variable Quiz to the data frame of scores; this variable should contain the overall quiz score obtained by dropping the lowest quiz, and then averaging the remaining scores.
for (i in 1:nrow(class_dat)) {
for (j in 1:ncol(class_dat)) {
if (is.na(class_dat[i,j])) {
class_dat[i,j] <- 0}
else {
class_dat[i,j] <- class_dat[i,j]}
}}
class_dat$QZ1 <- rescale100(class_dat$QZ1, xmin = 0, xmax = 12)
class_dat$QZ2 <- rescale100(class_dat$QZ2, xmin = 0, xmax = 18)
class_dat$QZ3 <- rescale100(class_dat$QZ3, xmin = 0, xmax = 20)
class_dat$QZ4 <- rescale100(class_dat$QZ4, xmin = 0, xmax = 20)
class_dat$Test1 <- rescale100(class_dat$EX1, xmin = 0, xmax = 80)
class_dat$Test2 <- rescale100(class_dat$EX2, xmin = 0, xmax = 90)
class_dat$Homework <- apply(class_dat[1:9], 1, score_homework)
class_dat$Quiz <- apply(class_dat[11:14], 1, score_quiz)
class_dat$Lab <- apply(class_dat[10],1, score_lab)
class_dat$Overall <- (class_dat$Lab * .1 + class_dat$Homework*.3 + class_dat$Quiz * .15 + class_dat$Test1*.2 + class_dat$Test2*.25)
switcher <- function (score){
if (score < 0 | score > 100) {
stop("score must be a number between 0 and 100")
}
if (score >= 95) {
return("A+")
} else if (score >= 90 & score < 95) {
return("A")
} else if (score >= 88 & score < 90) {
return("A-")
} else if (score >= 86 & score < 88) {
return("B+")
}else if (score >= 82 & score < 86) {
return("B")
} else if (score >= 79.5 & score < 82) {
return("B-")
}else if (score >= 77.5 & score < 79.5) {
return("C+")
} else if (score >= 70 & score < 77.5) {
return("C")
} else if (score >= 60 & score < 70) {
return("C-")
} else if (score >= 50 & score < 60) {
return("D")
} else if (score >= 0 & score < 50 ){
return ('F')}
}
class_dat$Grade <- apply(class_dat[22], 1, switcher)
for (i in 17:22){
x <- paste('../output', colnames(class_dat[i]), sep = '/')
z <- paste(x, 'stats.txt', sep = '-')
sink(z)
print_stats(summary_stats(class_dat[[i]]))
sink()
}
class_dat$Grade = factor(class_dat$Grade,
levels = c('A+', 'A', 'A-',
'B+', 'B', 'B-',
'C+', 'C', 'C-',
'D', 'F'))
sink('../output/summary-cleanscores.txt')
str(class_dat)
sink()
write.csv(class_dat, file = "../data/cleandata/cleanscores.csv", row.names = FALSE)
library(readr)
library(dplyr)
source('functions.R')
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(data)
print_stats(apply(data, 2, summary_stats))
sink()
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Test1 <- rescale100(data$EX1, xmin = 0, xmax = 80)
data$Test2 <- rescale100(data$EX2, xmin = 0, xmax = 90)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
data <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (is.na(data[i,j])) {
data[i,j] <- 0
}
}
}
data$QZ1 <- rescale100(data$QZ1, xmin = 0, xmax = 12)
data$QZ2 <- rescale100(data$QZ2, xmin = 0, xmax = 18)
data$QZ3 <- rescale100(data$QZ3, xmin = 0, xmax = 20)
data$QZ5 <- rescale100(data$QZ4, xmin = 0, xmax = 20)
data$Test1 <- rescale100(data$EX1, xmin = 0, xmax = 80)
data$Test2 <- rescale100(data$EX2, xmin = 0, xmax = 90)
data$Homework <- apply(data[1:9], 1, score_homework, drop = TRUE)
data$Quiz <- apply(data[11:14], 1, score_quiz, drop = TRUE)
score_lab(data$ATT)
class_dat$Lab <- apply(class_dat[10],1, score_lab)
class_dat$Lab <- apply(data[10],1, score_lab)
data$Lab <- apply(data[10],1, score_lab)
data$Overall <- (0.1 * data$Lab) + (0.3 * data$Homework)
+ (0.15 * data$Quiz) + (0.2 * data$Test1) + (0.25 * data$Test2)
0.25 * data$Test2
(0.1 * data$Lab) + (0.3 * data$Homework)
+ (0.15 * data$Quiz) + (0.2 * data$Test1) + (0.25 * data$Test2)
data$Overall <- (0.1 * data$Lab) + (0.3 * data$Homework) + (0.15 * data$Quiz) + (0.2 * data$Test1) + (0.25 * data$Test2)
else if (score >= 70) {
return("C")
score_grade <- function(score) {
if (score >= 95) {
return("A+")
}
else if (score >= 90 ) {
return("A")
}
else if (score >= 88) {
return("A-")
}
else if (score >= 86) {
return("B+")
}
else if (score >= 82) {
return("B")
}
else if (score >= 79.5) {
return("B-")
}
else if (score >= 77.5) {
return("C+")
}
else if (score >= 70) {
return("C")
}
else if (score >= 60) {
return("C-")
}
else if (score >= 50) {
return("D")
}
else {
return("F")
}
}
data["Overall"]
data$Grade <- apply(data["Overall"], 1, score_grade)
?paste
for (i in 17:22){
x <- paste('../output', colnames(class_dat[i]), sep = '/')
z <- paste(x, 'stats.txt', sep = '-')
sink(z)
print_stats(summary_stats(class_dat[[i]]))
sink()
}
data[17]
data[[17]]
for (i in 17:22){
x <- paste('../output', colnames(data[i]), sep = '/')
z <- paste(x, 'stats.txt', sep = '-')
sink(z)
print_stats(summary_stats(data[[i]]))
sink()
}
data$Grade = factor(data$Grade,
levels = c('A+', 'A', 'A-',
'B+', 'B', 'B-',
'C+', 'C', 'C-',
'D', 'F'))
sink('../output/summary-cleanscores.txt')
str(data)
sink()
write.csv(class_dat, file = "../data/cleandata/cleanscores.csv", row.names = FALSE)
write.csv(data, file = "../data/cleandata/cleanscores.csv", row.names = FALSE)
write.csv(data, file = "../data/cleandata/cleanscores.csv", row.names = FALSE)
install.packages("shiny")
library(shiny)
?tabPanel
install.packages(ggvis)
install.packages("ggvis")
library(shiny)
ui <- fluidpage(
titlePanel("Grade Visualizer"),
sidebarLayout(
sidebarPanel =
)
mainPanel(
tablesetPanel(
tabPanel("Barchart", value = 1,),
tabPanel("Histogram", value = 1,  ),
tabPanel("Table", value = 1,  )
)
)
)
server <-
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# This is adding my sidebar panel
#Im using conditional Panels so these sidebars are only chosen when
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
h3('Grade Distribution'),
tableOutput('table')
),
conditionalPanel(condition = "input.tabselected==2",
selectInput('var2', "X-axis variable", continuous,
selected = "HW1"),
sliderInput('width', 'Bin Width',
min = 1, max = 10, value = 10)
),
conditionalPanel(condition = "input.tabselected==3",
selectInput('var3', "X-axis variable", continuous,
selected = "Test1"),
selectInput('var4', "Y-axis variable", continuous,
selected = "Overall"),
sliderInput('opacity', 'Opacity',
min = 0, max = 1, value = .5),
radioButtons("line", label = h3("Show line"),
choices = list("none" = 1,
"lm" = 2,
"loess" = 3
)
)
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel('Histogram', value = 2,
ggvisOutput('histogram'),
'Summary Statistics',
verbatimTextOutput('summ')),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot"),
'Correlation:',
textOutput('corr')),
id = 'tabselected')
)
)
)
library(shiny)
ui <- fluidpage(
titlePanel("Grade Visualizer"),
sidebarLayout(
sidebarPanel =
)
mainPanel(
tablesetPanel(
tabPanel("Barchart", value = 1,),
tabPanel("Histogram", value = 1,  ),
tabPanel("Table", value = 1,  )
)
)
)
server <-
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidpage(
titlePanel("Grade Visualizer"),
sidebarLayout(
sidebarPanel =
)
mainPanel(
tablesetPanel(
tabPanel("Barchart", value = 1,),
tabPanel("Histogram", value = 2  ),
tabPanel("Table", value = 3  )
)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidpage(
titlePanel("Grade Visualizer"),
sidebarLayout(
sidebarPanel =
)
mainPanel(
tablesetPanel(
tabPanel("Barchart", value = 1,),
tabPanel("Histogram", value = 2  ),
tabPanel("Table", value = 3  )
)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidpage(
titlePanel("Grade Visualizer"),
sidebarLayout(
mainPanel(
tablesetPanel(
tabPanel("Barchart", value = 1,),
tabPanel("Histogram", value = 2  ),
tabPanel("Table", value = 3  )
)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis')
library(shiny)
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/Desktop/testShiny')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
?conditionalPanel
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
?sliderInput
?radio
?radioButtons
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggvis)
library(dplyr)
source('../code/functions.r')
clean_dat <- read.csv('../data/cleandata/cleanscores.csv')
clean_dat$Grade = factor(clean_dat$Grade,
levels = c('A+', 'A', 'A-',
'B+', 'B', 'B-',
'C+', 'C', 'C-',
'D', 'F'))
colNames <- colnames(clean_dat[1:22])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Grade Visualizer"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected == 1",
h3('Grade Distribution'),
tableOutput('table')),
conditionalPanel(condition = 'input.tabselected == 2',
selectInput('var1', "X-axis variable", colNames,
selected = "HW1"),
sliderInput('width', 'Bin Width',
min = 1, max = 10, value = 10)),
conditionalPanel(condition = 'input.tabselecter ==3',
selectInput('var2', "X-axis variable", colNames, selected = "Test1"),
selectInput('var3', "Y-axis variable", colNames, selected = "Overall"),
sliderInput('opacity', "Opacity", min = 0, max = 1, value = 0.5),
radioButtons('line', "Show line", choices = list("none" = 1,
"lm" = 2,
"loess" = 3)
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Barchart", value = 1,
ggvisOutput("barchart")),
tabPanel('Histogram', value = 2,
ggvisOutput('histogram'),
'Summary Statistics',
verbatimTextOutput('summ')),
tabPanel("Scatterplot", value = 3,
ggvisOutput("scatterplot"),
'Correlation:',
textOutput('corr')),
id = 'tabselected')
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
?conditionalPanel
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
?prop
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
View(clean_dat)
clean_dat[23]
clean_dat[24]
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/Berkeley/Fall_2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
